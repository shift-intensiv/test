/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * shift tester üß™
 * –ê–ø–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * OpenAPI spec version: 1.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import { api } from '@/utils/api/instance';

export interface SessionResponse {
  /**
   * –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
   * @nullable
   */
  reason?: string | null;
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
  user: User;
}

export interface UpdateProfileResponse {
  /**
   * –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
   * @nullable
   */
  reason?: string | null;
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
  user: User;
}

export interface UpdateProfileProfileDto {
  /**
   * –ì–æ—Ä–æ–¥
   * @nullable
   */
  city: string | null;
  /**
   * –ü–æ—á—Ç–∞
   * @nullable
   */
  email: string | null;
  /**
   * –ò–º—è
   * @nullable
   */
  firstname: string | null;
  /**
   * –§–∞–º–∏–ª–∏—è
   * @nullable
   */
  lastname: string | null;
}

export interface UpdateProfileDto {
  /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
  phone: string;
  /** –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  profile: UpdateProfileProfileDto;
}

export interface User {
  /** –ì–æ—Ä–æ–¥ */
  city?: string;
  /** –ü–æ—á—Ç–∞ */
  email?: string;
  /** –ò–º—è */
  firstname?: string;
  /** –§–∞–º–∏–ª–∏—è */
  lastname?: string;
  /** –û—Ç—á–µ—Å—Ç–≤–æ */
  middlename?: string;
  /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
  phone: string;
}

export interface SignInResponse {
  /**
   * –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
   * @nullable
   */
  reason?: string | null;
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω */
  token: string;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
  user: User;
}

export interface SignInDto {
  /** –û—Ç–ø –∫–æ–¥ */
  code: number;
  /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
  phone: string;
}

export interface OtpResponse {
  /**
   * –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
   * @nullable
   */
  reason?: string | null;
  /** –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–ø –∫–æ–¥–∞ –≤ –º—Å */
  retryDelay: number;
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
}

export interface CreateOtpDto {
  phone: string;
}

/**
 * @summary —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø –∫–æ–¥–∞
 */
export const otpsControllerCreateOtp = (
  createOtpDto: CreateOtpDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<OtpResponse>> => {
  return api.post(`/auth/otp`, createOtpDto, options);
};

export const getOtpsControllerCreateOtpMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otpsControllerCreateOtp>>,
    TError,
    { data: CreateOtpDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof otpsControllerCreateOtp>>,
  TError,
  { data: CreateOtpDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otpsControllerCreateOtp>>,
    { data: CreateOtpDto }
  > = (props) => {
    const { data } = props ?? {};

    return otpsControllerCreateOtp(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OtpsControllerCreateOtpMutationResult = NonNullable<
  Awaited<ReturnType<typeof otpsControllerCreateOtp>>
>;
export type OtpsControllerCreateOtpMutationBody = CreateOtpDto;
export type OtpsControllerCreateOtpMutationError = AxiosError<unknown>;

/**
 * @summary —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø –∫–æ–¥–∞
 */
export const useOtpsControllerCreateOtp = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otpsControllerCreateOtp>>,
    TError,
    { data: CreateOtpDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof otpsControllerCreateOtp>>,
  TError,
  { data: CreateOtpDto },
  TContext
> => {
  const mutationOptions = getOtpsControllerCreateOtpMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
export const usersControllerSignin = (
  signInDto: SignInDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SignInResponse>> => {
  return api.post(`/users/signin`, signInDto, options);
};

export const getUsersControllerSigninMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerSignin>>,
    TError,
    { data: SignInDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerSignin>>,
  TError,
  { data: SignInDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerSignin>>,
    { data: SignInDto }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerSignin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerSigninMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerSignin>>
>;
export type UsersControllerSigninMutationBody = SignInDto;
export type UsersControllerSigninMutationError = AxiosError<unknown>;

/**
 * @summary –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
export const useUsersControllerSignin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerSignin>>,
    TError,
    { data: SignInDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerSignin>>,
  TError,
  { data: SignInDto },
  TContext
> => {
  const mutationOptions = getUsersControllerSigninMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usersControllerUpdateProfile = (
  updateProfileDto: UpdateProfileDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UpdateProfileResponse>> => {
  return api.patch(`/users/profile`, updateProfileDto, options);
};

export const getUsersControllerUpdateProfileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateProfile>>,
    TError,
    { data: UpdateProfileDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersControllerUpdateProfile>>,
  TError,
  { data: UpdateProfileDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersControllerUpdateProfile>>,
    { data: UpdateProfileDto }
  > = (props) => {
    const { data } = props ?? {};

    return usersControllerUpdateProfile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdateProfile>>
>;
export type UsersControllerUpdateProfileMutationBody = UpdateProfileDto;
export type UsersControllerUpdateProfileMutationError = AxiosError<unknown>;

/**
 * @summary –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useUsersControllerUpdateProfile = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersControllerUpdateProfile>>,
    TError,
    { data: UpdateProfileDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersControllerUpdateProfile>>,
  TError,
  { data: UpdateProfileDto },
  TContext
> => {
  const mutationOptions = getUsersControllerUpdateProfileMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usersControllerSession = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SessionResponse>> => {
  return api.get(`/users/session`, options);
};

export const getUsersControllerSessionQueryKey = () => {
  return [`/users/session`] as const;
};

export const getUsersControllerSessionQueryOptions = <
  TData = Awaited<ReturnType<typeof usersControllerSession>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersControllerSession>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerSessionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerSession>>> = ({ signal }) =>
    usersControllerSession({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersControllerSession>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersControllerSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerSession>>
>;
export type UsersControllerSessionQueryError = AxiosError<unknown>;

/**
 * @summary –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useUsersControllerSession = <
  TData = Awaited<ReturnType<typeof usersControllerSession>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersControllerSession>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersControllerSessionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
